package Analizadores;
import java_cup.runtime.*;
import App.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

parser code
{:  
    public static int contId=1;
    public static Nodo Raiz;
    public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("C:\\Users\\Angel\\OneDrive\\Escritorio\\" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=box]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());
            pw.println("}");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "C:\\Users\\erick\\OneDrive\\Escritorio\\" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "C:\\Users\\erick\\OneDrive\\Escritorio\\" +nombre+ ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        App.Aplicacion.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        App.Aplicacion.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
:}

// terminal [Tipo] listaterminales;
terminal String nombre, suma, resta, mult, div, entero, decimal;

// non terminal [Tipo] listanoterminales;
non terminal Nodo INICIO, EXPRESION;

precedence left suma, resta;
precedence left mult, div;

start with INICIO;
    //VARIABLE::= VARIABLE int id ptcoma
               //| int id ptcoma
               //|error suma;
INICIO::= EXPRESION:valor {:System.out.println(valor);
    App.Aplicacion.list_of_names+=valor;
    parser.Raiz = valor;
    graficarArbol(valor,"operaciones");
:};
                //2        +       5
                //creamos un nodo suma                              2*4+5-3/2*5*3*7/6*9
//EREG ::= NOMBRE -> EXPRESION:valor{:parser.Raiz = valor;:}
EXPRESION ::= EXPRESION:a suma EXPRESION:b {:
                //RESULT=a+b;
                Nodo nuevaSuma = new Nodo(a, b, "+", parser.contId);
                parser.contId++;
                RESULT = nuevaSuma;
            :} // EXPRESION ::= EXPRESION signcon EXPRESION EXPRESION
            | EXPRESION:a resta EXPRESION:b {:
                //RESULT=a-b;
                Nodo nuevaResta = new Nodo(a, b, "-", parser.contId);
                parser.contId++;
                RESULT = nuevaResta;
            :}
            | EXPRESION:a mult EXPRESION:b {:
                //RESULT=a*b;
                //addNodo("mult",a,b)
                Nodo nuevaMult = new Nodo(a, b, "*", parser.contId);
                parser.contId++;
                RESULT = nuevaMult;
            :} // mult EXPRESION:a EXPRESION:b
            | EXPRESION:a div EXPRESION:b {:
                //RESULT=a/b;
                Nodo nuevaDiv = new Nodo(a, b, "/", parser.contId);
                parser.contId++;
                RESULT = nuevaDiv;
            :}
            //| menos EXPRESION:a
            /*
            {:
                Nodo nuevaNegacion = new Nodo(null, a, "/", parser.contId);
                parser.contId++;
                RESULT = nuevaNegacion;
            :}
            */
            //creamos los nodos de enteros
            | entero:val {:
                //RESULT=new Double(val);
                Nodo nuevoEntero = new Nodo(null,null,val,parser.contId);
                parser.contId++;
                RESULT = nuevoEntero;
            :}
            | decimal:val {:
                //RESULT=new Double(val);
                Nodo nuevoDecimal = new Nodo(null,null,val,parser.contId);
                parser.contId++;
                RESULT = nuevoDecimal;
            :}
            | error suma
            //| error resta
            //| error mult
            //| error div
            // | asteris EXPRESION
            // | mas EXPRESION
            // | punto EXPRESION EXPRESION <=> EXPRESION punto EXPRESION
            ;
//2+2*2.5+10*2


/*LID::= LID comaa nombre:name {:App.Aplicacion.list_of_names+=name+"\n";:}
    | nombre:name {:App.Aplicacion.list_of_names+=name+"\n";:};*/