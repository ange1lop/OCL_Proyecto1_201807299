package Analizadores;
import java_cup.runtime.*;
import App.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

parser code
{:  
    public static int contId=1;
    public static Nodo Raiz;
    public static ArrayList<Siguiente> sigue = new ArrayList<Siguiente>();
    public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("C:\\Users\\Angel\\OneDrive\\Escritorio\\" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=record]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());
            pw.println("}");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "C:\\Users\\Angel\\OneDrive\\Escritorio\\" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "C:\\Users\\Angel\\OneDrive\\Escritorio\\" +nombre+ ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoE = new Errores("Error sintactico: recuperado", s.value.toString(), s.right+1, s.left+1);
        App.Aplicacion.listaErrores.add(nuevoE);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoE = new Errores("Error sintactico: no recuperado", s.value.toString(), s.right+1, s.left+1);
        App.Aplicacion.listaErrores.add(nuevoE);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
:}

// terminal [Tipo] listaterminales;
terminal String identificador, entero, conj,especiales;
terminal String colocho, cadena;
//ASCII
terminal String a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a58,a59,a60,a61,a62,a63,a64,a91,a92,a93,a94,a95,a96,a123,a124,a125;
// non terminal [Tipo] listanoterminales;
non terminal Nodo INICIO, CUERPO, ASCIICODE, LISTASIMBOLOS, EXPRESION,OBTENER,REGLAS;


start with INICIO;
    //VARIABLE::= VARIABLE int id ptcoma
               //| int id ptcoma
               //|error suma;
INICIO::= a123 CUERPO a37 a37 a37 a37 REGLAS a125 {:
    System.out.println("Todo correcto");
    //App.Aplicacion.list_of_names+=valor;
    //parser.Raiz = valor;
    //graficarArbol(valor,"operaciones");
:};

CUERPO::= conj a58 identificador a45 a62 identificador colocho identificador a59 
        |CUERPO conj a58 identificador a45 a62 identificador colocho identificador a59
        |conj a58 identificador a45 a62 entero colocho entero a59 
        |CUERPO conj a58 identificador a45 a62 entero colocho entero a59
        |conj a58 identificador a45 a62 ASCIICODE colocho ASCIICODE a59 
        |CUERPO conj a58 identificador a45 a62 ASCIICODE colocho ASCIICODE a59
        |conj a58 identificador a45 a62 LISTASIMBOLOS a59 
        |CUERPO conj a58 identificador a45 a62 LISTASIMBOLOS a59
        |EXPRESION
        |CUERPO EXPRESION

;
ASCIICODE::= a33 |a34|a35|a36|a37|a38|a39|a40|a41|a42|a43|a44|a45|a46|a47|a58|a59|a60|a61|a62|a63|a64|a91|a92|a93|a94|a95|a96|a123|a124|a125|especiales
;

LISTASIMBOLOS::= LISTASIMBOLOS a44 identificador
        |identificador
        |LISTASIMBOLOS a44 entero
        |entero
;
EXPRESION::= identificador:nombre a45 a62 OBTENER:valor a59 {:
            App.Aplicacion.list_of_names+=valor;
            Nodo nuevoDecimal = new Nodo(null,null,"#",parser.contId,""+contId,""+contId,false);
            Siguiente nusi = new Siguiente(contId,"#","");
            parser.sigue.add(nusi);
            parser.contId++;
            String prEnviar = valor.getPrimeros();
            if (valor.isAnulable()){
                prEnviar += nuevoDecimal.getId();
            }
            Nodo raiz = new Nodo(valor,nuevoDecimal,".",parser.contId,prEnviar,nuevoDecimal.getSegundos(),false);
            String[] parts = valor.getSegundos().split(",");
            for(String t:parts){
                for(Siguiente tem:parser.sigue){
                    if(!t.equals("")  && tem.getHoja() ==  Integer.parseInt(t)  ){
                        tem.setSiguiente(tem.getSiguiente()+","+nuevoDecimal.getId());
                    }
                }
            }
            ArrayList<Siguiente> temo = new ArrayList<Siguiente>();
            temo.addAll(new ArrayList<>(parser.sigue));
            Datos datosnuevo = new Datos(raiz, temo,nuevoDecimal.getId(),prEnviar,nombre);
            App.Aplicacion.expresiones.add(datosnuevo);
            parser.Raiz = raiz;
            parser.sigue.clear();
            graficarArbol(raiz,nombre);
            parser.contId = 0;
:}
;
OBTENER::= a124:val OBTENER:valor1 OBTENER:valor2 {:
            boolean mandar = false;
            if (valor1.isAnulable() || valor2.isAnulable()){
                mandar = true;
            }
            
            Nodo nuevoDecimal = new Nodo(valor1,valor2,"\\|",parser.contId,valor1.getPrimeros()+","+valor2.getPrimeros(),valor1.getSegundos()+","+valor2.getSegundos(),false);
            parser.contId++;
            RESULT = nuevoDecimal;
        :}
        | a46:val OBTENER:valor1 OBTENER:valor2 {:
            String calculado1 =valor1.getPrimeros();
            String calculado2 = valor2.getSegundos();
            boolean mandar = false;
            if (valor1.isAnulable() && valor2.isAnulable()){
                mandar = true;
            }
            if (valor1.isAnulable()){
                calculado1 = valor1.getPrimeros()+"," + valor2.getPrimeros() ;
            }
            if (valor2.isAnulable()){
                calculado2 = valor1.getSegundos()+"," + valor2.getSegundos();
            }
            String[] parts = valor1.getSegundos().split(",");
            for(String t:parts){
                for(Siguiente tem:parser.sigue){
                    if(!t.equals("")  && tem.getHoja() ==  Integer.parseInt(t)){
                        if(tem.getSiguiente().equals("")){
                            String[] parts2 = tem.getSiguiente().split(",");
                            String[] parts3 = valor2.getPrimeros().split(",");
                            boolean ingresar = true;
                            for(String ds:parts3){
                                    for(String ds2:parts2){
                                        if(ds2.equals(ds)){
                                            ingresar = false;
                                            break;
                                        }
                                        if(ingresar){
                                            if(tem.getSiguiente().equals("")){
                                                tem.setSiguiente(ds);
                                            }else{
                                                tem.setSiguiente(tem.getSiguiente()+","+ds);
                                            }
                                        }
                                    }
                            }
                            
                        }else{
                            tem.setSiguiente(valor2.getPrimeros());
                        }
                    }
                }
            }
            Nodo nuevoDecimal = new Nodo(valor1,valor2,val,parser.contId,calculado1,calculado2,mandar);
            parser.contId++;
            RESULT = nuevoDecimal;
        :}
        | a63:val OBTENER:valor2 {:
            Nodo nuevoDecimal = new Nodo(valor2,null,val,parser.contId,valor2.getPrimeros(),valor2.getSegundos(),true);
            parser.contId++;
            RESULT = nuevoDecimal;
        :}
        | a43:val OBTENER:valor2 {:
            boolean mandar = false;
            if (valor2.isAnulable()){
                mandar = true;
            }
            String[] parts = valor2.getSegundos().split(",");
            for(String t:parts){
                for(Siguiente tem:parser.sigue){
                    if(!t.equals("")  && tem.getHoja() ==  Integer.parseInt(t) ){
                        if(tem.getSiguiente().equals("")){
                            String[] parts2 = tem.getSiguiente().split(",");
                            String[] parts3 = valor2.getPrimeros().split(",");
                            boolean ingresar = true;
                            for(String ds:parts3){
                                    for(String ds2:parts2){
                                        if(ds2.equals(ds)){
                                            ingresar = false;
                                            break;
                                        }
                                        if(ingresar){
                                            if(tem.getSiguiente().equals("")){
                                                tem.setSiguiente(ds);
                                            }else{
                                                tem.setSiguiente(tem.getSiguiente()+","+ds);
                                            }
                                        }
                                    }
                            }
                            
                        }else{
                            tem.setSiguiente(valor2.getPrimeros());
                        }
                    }
                }
            }
            Nodo nuevoDecimal = new Nodo(valor2,null,val,parser.contId,valor2.getPrimeros(),valor2.getSegundos(),mandar);
            parser.contId++;
            RESULT = nuevoDecimal;
        :}
        | a42:val  OBTENER:valor2 {:
            Nodo nuevoDecimal = new Nodo(valor2,null,val,parser.contId,valor2.getPrimeros(),valor2.getSegundos(),true);
            String[] parts = valor2.getSegundos().split(",");
            for(String t:parts){
                for(Siguiente tem:parser.sigue){
                    if(!t.equals("")  && tem.getHoja() ==  Integer.parseInt(t)){
                        if(tem.getSiguiente().equals("")){
                            String[] parts2 = tem.getSiguiente().split(",");
                            String[] parts3 = valor2.getPrimeros().split(",");
                            boolean ingresar = true;
                            for(String ds:parts3){
                                    for(String ds2:parts2){
                                        if(ds2.equals(ds)){
                                            ingresar = false;
                                            break;
                                        }
                                        if(ingresar){
                                            if(tem.getSiguiente().equals("")){
                                                tem.setSiguiente(ds);
                                            }else{
                                                tem.setSiguiente(tem.getSiguiente()+","+ds);
                                            }
                                            
                                        }
                                    }
                            }
                            
                        }else{
                            tem.setSiguiente(valor2.getPrimeros());
                        }
                    }
                }
            }
            parser.contId++;
            RESULT = nuevoDecimal;
        :}
        |a123 identificador:val a125 {:
            Nodo nuevoDecimal = new Nodo(null,null,val,parser.contId,""+contId,""+contId,false);
            Siguiente snuevo = new Siguiente(contId,val,"");
            parser.sigue.add(snuevo);
            parser.contId++;
            RESULT = nuevoDecimal;
        :}
        |cadena:val{:
            String str = val;
            String enviar = str.replaceAll("\"", "");
            Nodo nuevoDecimal = new Nodo(null,null,enviar,parser.contId,""+contId,""+contId,false);
            Siguiente snuevo = new Siguiente(contId,enviar,"");
            parser.sigue.add(snuevo);
            parser.contId++;
            RESULT = nuevoDecimal;
        :}
        |especiales:val {:
                //RESULT=new Double(val);
            Nodo nuevoDecimal = new Nodo(null,null,val,parser.contId,""+contId,""+contId,false);
            Siguiente snuevo = new Siguiente(contId,val,"");
            parser.sigue.add(snuevo);
            parser.contId++;
            RESULT = nuevoDecimal;
        :}

;
REGLAS::= identificador a58 cadena a59
        | REGLAS identificador a58 cadena a59
;





/*LID::= LID comaa nombre:name {:App.Aplicacion.list_of_names+=name+"\n";:}
    | nombre:name {:App.Aplicacion.list_of_names+=name+"\n";:};*/